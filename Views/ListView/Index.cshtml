@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model WEB_SHOW_WRIST_STRAP.Dataconfig;

@{
    int IDPOINT = ViewBag.IdPoint;
    int IDLINE = ViewBag.IdLine;
}

<script src="~/lib/chart/chart.js"></script>

<!DOCTYPE html>
<html lang="en">

<head>
    <link rel="stylesheet" href="~/css/listview.css" asp-append-version="true" />
    <script src="~/lib/chart/chart.js"></script>
    <script src="~/lib/chart/luxon.js"></script>
    <script src="~/lib/chart/chartjs-adapter-date-fns.js"></script>
    <script src="~/lib/chart/chartjs-adapter-luxon.js"></script>
    <script src="~/lib/chart/chart-plugin.js"></script>
    <script src="~/lib/chart/chartjs-plugin-annotation.min.js"></script>
    <style>
        .scrollable-tbody {
            display: block;
            max-height: 52.1vh; /* Chiều cao cố định cho tbody */
            overflow-y: auto; /* Tạo thanh cuộn */
        }


            .scrollable-tbody tr {
                display: table;
                width: 100%;
                table-layout: fixed;
            }

            .scrollable-tbody td, .scrollable-tbody th {
                width: 16.66667%;
            }

        table thead, table tbody tr {
            display: table;
            width: 100%;
            table-layout: fixed;
        }

       
    </style>
</head>

<body>

    <div>
        <div class="home-container">
            <div class="home-container1" id="clayout">
                @*  <span class="home-text">Line Layout</span> *@
                <div id="imgline"></div>
                <div id="layoutline"></div>
            </div>
            <div id="LsBoxPoint" class="home-container2">
                <div class="home-container3 button">
                    <span id="NLineBox" class="home-text01">IVI</span>
                </div>
            </div>
            <div class="home-container4">
                @* <div class="TextName01 animationbase">
                    <span class="">Area:</span>
                </div>
                <select id="CboxFloor" class="selectFloor" onchange="Loadlsboxline(this.value)">
                    <option value="all">All Floor</option>
                </select> *@
                <div style="width:0%"></div>
                <div class="TextName01 animationbase">
                    <span class=""> Line:</span>
                    <span id="TxtnameLine" class="">BMW POST</span>
                </div>
                <div class="TextName01 animationbase">
                    <span id="TxtIdivi" class="">IVI59</span>
                </div>
              @*   <div class="TextName01 animationbase">
                    <span class="">Area:</span>
                    <span id="TxtNameFloor" class="">IVIFloor1</span>
                </div> *@
                <div class="TextName01 animationbase">
                    <span class="">Note:</span>
                    <span id="TxtNoteLine" class=""></span>
                </div>
            </div>
            <div class="home-container5">
                <div class="home-text26-1"></div>
                <div class="home-text26">List Of Lines</div>
                <div id="ListboxLines" class="home-container6">
                </div>
                <div class="home-text27-1"></div>
                <div class="home-text27">History Data</div>


                <div class="home-container7" style="">

                    <div id="newChartContainer" style="display: none;">
                        <button id="closeChartButton" class="close-chart-button" onclick="closeNewChart()">></button>
                        <canvas id="newChart"></canvas>
                    </div>
                    <div class="chardf" style="display:flex; width:100%; height:100%;">
                        <div class="divchart" id="divchart">
                            <canvas id="myChart" class="ChartAlarm"></canvas>
                        </div>
                        <div class="divtbtopalarm">
                            <table class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        <th colspan="6" class="titletable">Top History</th>
                                    </tr>
                                    <tr style="background-color:#888">
                                        <th>Time Begin</th>
                                        <th>ID Point</th>
                                        <th>Name Point</th>
                                        <th>Status</th>
                                        <th>Total Time</th>
                                        <th>Time End</th>
                                    </tr>
                                </thead>
                                <tbody id="dttopdataline" class="scrollable-tbody">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>




<script>
    function closeNewChart() {
        const newChartContainer = document.getElementById('newChartContainer');
        newChartContainer.style.display = 'none';

        document.querySelector('.chardf').style.display = 'flex';
    }


    let newChart;
    let run = false;
    function CreateNewChart(idPoint) {
        var config = {
            type: 'line',
            data: {
                datasets: [
                    {
                        label: 'Leakage Voltage',
                        borderColor: 'darkorange',
                        cubicInterpolationMode: 'monotone',
                        data: [],
                        yAxisID: 'yl',

                    }
                ]
            },
            options: {
                responsive: true,
                interaction: {
                    mode: 'index',
                    intersect: false,
                    axis: 'x'
                },
                plugins: {
                    title: {
                        display: true,
                        text: `Electrical Leakage Monitoring IdPoint: ${idPoint}`,
                        font: {
                            size: 14,
                            weight: 900
                        },
                        color: 'white'
                    },
                    legend: {
                        onClick: Legendclick,
                        labels: {
                            color: 'white',  // Thiết lập màu trắng cho tất cả các nhãn trong legend
                            font: {
                                size: 13,
                                weight: 700
                            }
                        }
                    },
                    annotation: {
                        annotations: {
                            HLeakage: {
                                type: 'line',
                                borderColor: 'rgba(222, 0, 0, 0.8)',
                                borderWidth: 1,
                                borderDash: [6, 6],
                                borderDashOffset: 0,
                                scaleID: 'yl',
                                value: 30,
                                label: {
                                    position: 'start',
                                    backgroundColor: 'rgba(200, 102, 102, 0.5)',
                                    content: 'High Leakage',
                                    display: true,
                                }
                            },
                            LLeakage: {
                                type: 'line',
                                borderColor: 'rgba(222, 0, 0, 0.8)',
                                borderWidth: 1,
                                borderDash: [6, 6],
                                borderDashOffset: 0,
                                scaleID: 'yl',
                                value: 0,
                                label: {
                                    position: 'start',
                                    backgroundColor: 'rgba(200, 102, 102, 0.5)',
                                    content: 'Low Leakage',
                                    display: true,
                                }
                            }
                        }
                    },
                    zoom: {
                        pan: {
                            enabled: true,
                            mode: 'x',
                            threshold: 10,
                        },
                        zoom: {
                            wheel: {
                                enabled: true,
                            },
                            pinch: {
                                enabled: true
                            },
                            mode: 'x',
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'realtime',
                        time: {
                            unit: 'minute',
                            stepSize: 30, // Mỗi ô tương ứng với 30 phút
                            displayFormats: {
                                minute: 'HH:mm',
                                color: 'white'
                            }
                        },
                        ticks: {
                            font: {
                                size: 13,
                                weight: 600
                            },
                            autoSkip: true,
                            maxTicksLimit: 26, // Đảm bảo chỉ hiển thị 26 mốc (13 giờ / 0.5 giờ mỗi mốc)
                            maxRotation: 0,// Giữ nhãn thẳng
                            color: 'white'
                        },
                        title: {
                            display: true,
                            text: 'Time',
                            font: {
                                size: 13,
                                weight: 600
                            },
                            color: 'white'
                        },
                        realtime: {
                            duration: 12 * 3600 * 1000, // 13 giờ (12 giờ trước + 1 giờ tiếp theo)
                            refresh: 15000,
                            delay: -1 * 3600 * 1000,
                            onRefresh: chart => {
                                updateChartDataNew(idPoint, chart);
                            }
                        }
                    },
                    yl: {
                        ticks: {
                            font: {
                                size: 13,
                                weight: 600
                            },
                            color: 'white'
                        },
                        title: {
                            display: true,
                            text: 'Leakage Voltage (V)',
                            font: {
                                size: 13,
                                weight: 600
                            },
                            color: 'white'
                        },
                        display: true,
                        position: 'left',
                        suggestedMin: 0,
                        suggestedMax: 10
                    }
                }
            }
        };

        if (newChart) {
            newChart.destroy();
        }

        run = true;

        newChart = new Chart(document.getElementById('newChart'), config);
    }

    function updateChartDataNew(idPoint, chart) {
        const idLine = lineshownow.IdLine;

        $.get('@Url.Action("GetChartDataNew", "History")', { idPoint: idPoint, idLine: idLine })
            .done(function (data) {
                const iValues = data.map(item => ({ x: item.timestamp, y: item.u })); // Dữ liệu dòng rò (leakage current)

                chart.data.datasets[0].data = iValues; // Chỉ cập nhật dữ liệu dòng rò
                chart.update();
            })
            .fail(function (error) {
                console.error('Error fetching data:', error);
            });
    }


    let timeckbf = Date.now();
    let hideLimitLeakage = false;
    let hideLimitVoltage = false;

    function Legendclick(e, legendItem, legend) {
        const index = legendItem.datasetIndex;
        const ci = legend.chart;

        if (ci.isDatasetVisible(index)) {
            ci.hide(index);
            legendItem.hidden = true;
        } else {
            ci.show(index);
            legendItem.hidden = false;
        }

        let timespan = Date.now() - timeckbf;

        if (timespan <= 500) {
            if (index == 0) { hideLimitLeakage = !hideLimitLeakage; }
            if (index == 1) { hideLimitVoltage = !hideLimitVoltage; }
        }
        timeckbf = Date.now();

        let lines = ci.options.plugins.annotation.annotations;

        if (index == 0) {
            if (!hideLimitLeakage) {
                lines.HLeakage.display = lines.LLeakage.display = !legendItem.hidden;
            } else {
                lines.HLeakage.display = lines.LLeakage.display = false;
            }
        } else if (index == 1) {
            if (!hideLimitVoltage) {
                lines.HVoltage.display = lines.LVoltage.display = !legendItem.hidden;
            } else {
                lines.HVoltage.display = lines.LVoltage.display = false;
            }
        }

        ci.update();
    }

    function showNewChart(idPoint) {

        document.querySelector('.chardf').style.display = 'none';

        const newChartContainer = document.getElementById('newChartContainer');
        newChartContainer.style.display = 'block';

        CreateNewChart(idPoint);
    }



    let data = [];

    const ctx = document.getElementById('myChart').getContext('2d');
    const maxBarThickness = 50; // Giá trị tối đa cho barThickness
    const minBarThickness = 10; // Giá trị tối thiểu cho barThickness

    const myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: data.map(item => item.label),
            datasets: [{
                label: 'Dataset 1',
                data: data.map(item => item.value),
                backgroundColor: [], // Mảng chứa màu sẽ được tạo động
                borderColor: 'rgba(0, 0, 0, 1)',
                borderWidth: 1
            }]
        },
        options: {
            indexAxis: 'y',
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Time Alarm (min)',
                        color: 'white' // Đổi màu chữ của title trục X
                    },
                    ticks: {
                        color: 'white' // Màu chữ của nhãn trục X
                    }
                },
                y: {
                    title: { display: true, text: 'Point ID', color: 'white' },
                    ticks: { autoSkip: false, color: 'white' }

                }
            },
            plugins: {
                legend: {
                    labels: {

                        boxWidth: 0 // Ẩn ô màu
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function (tooltipItem) {
                            const item = data[tooltipItem.dataIndex];
                            const totalSeconds = item.value * 60; // Giả sử dữ liệu trong phút
                            const formattedTime = formatTime(totalSeconds);
                            return `${formattedTime} (${item.count} lần)`; // Hiển thị thời gian và số lần
                        }
                    }
                }
            }
        }
    });

    // Hàm tạo màu xanh ngọc nhạt dần
    function getGradientColor(startColor, endColor, percent) {
        const start = hexToRgb(startColor);
        const end = hexToRgb(endColor);

        const r = Math.round(start.r + percent * (end.r - start.r));
        const g = Math.round(start.g + percent * (end.g - start.g));
        const b = Math.round(start.b + percent * (end.b - start.b));

        return `rgba(${r}, ${g}, ${b}, 1)`;
    }

    // Chuyển đổi mã hex thành đối tượng RGB
    function hexToRgb(hex) {
        const bigint = parseInt(hex.slice(1), 16);
        const r = (bigint >> 16) & 255;
        const g = (bigint >> 8) & 255;
        const b = bigint & 255;
        return { r, g, b };
    }

    // Hàm tính toán barThickness
    function calculateBarThickness(numBars) {
        const barThickness = Math.max(minBarThickness, Math.min(maxBarThickness, maxBarThickness - (numBars - 1) * 5));
        return barThickness;
    }

    // Hàm cập nhật đồ thị
    function updateChart() {
        if (Lscountpoint && Lscountpoint.length > 0) {
            // Cập nhật dữ liệu biểu đồ
            data = [];  // Reset data before updating

            Lscountpoint.forEach((item, index) => {
                if (item.count > 0) {
                    let itemdatas = data.find(x => x.label == index);
                    if (itemdatas) {
                        itemdatas.value = item.totalTime / 60;
                    } else {
                        data.push({
                            label: index,
                            value: item.totalTime / 60,
                            count: item.count
                        });
                    }
                }
            });

            // Sắp xếp dữ liệu theo tổng thời gian
            data.sort((a, b) => b.value - a.value);

            // Cập nhật nhãn và dữ liệu biểu đồ
            myChart.data.labels = data.map(item => `${item.label}`);

            myChart.data.datasets[0].data = data.map(item => item.value);

            // Tạo màu xanh ngọc nhạt dần
            const startColor = '#99fa9d'; // Màu xanh ngọc đậm
            const endColor = '#E0FFF5'; // Màu xanh ngọc nhạt
            const backgroundColorGradient = data.map((item, index) => {
                const percent = index / data.length;
                return getGradientColor(startColor, endColor, percent);
            });

            // Gán màu nền với gradient màu xanh ngọc nhạt dần
            myChart.data.datasets[0].backgroundColor = backgroundColorGradient;

            // Tính toán và cập nhật barThickness
            const barThickness = calculateBarThickness(data.length);
            myChart.data.datasets[0].barThickness = barThickness;

            // Cập nhật biểu đồ
            myChart.update();
        }
    }

    function formatTime(totalSeconds) {
        // Làm tròn số giây thành số nguyên
        totalSeconds = Math.round(totalSeconds);

        let hours = Math.floor(totalSeconds / 3600);
        let minutes = Math.floor((totalSeconds % 3600) / 60);
        let remainingSeconds = totalSeconds % 60;

        return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;
    }


    let Layout_lines = document.getElementById("layoutline");

    let imgline = document.getElementById("imgline");

    let Listboxlines = document.getElementById("ListboxLines");


    let LsLineshow;

    function Loadlsboxline(idfloor) {
        Listboxlines.innerHTML = "";

        let txthtmlinner = "";

        if (idfloor == "all") {
            LsLineshow = Userline;
        }
        else {
            LsLineshow = GetUserLineofFloor(idfloor);
        }

        LsLineshow.forEach(function (line) {
            let itemtxthtml =
                '<button id="Boxl' + line.IdLine + '" type="button" class="BoxLine btn alert-shake" onclick="ClickBoxLine(' + line.IdLine + ')">' +
                '<span id="BoxlIDIVI' + line.IdLine + '" class="Boxline-head">' + line.IdIviLine + '</span>' +
                '<span id="BoxlName' + line.IdLine + '" class="Boxline-mid">' + line.NameLine + '</span>' +
                '</button>';

            txthtmlinner += itemtxthtml;

        });

        Listboxlines.innerHTML = txthtmlinner;

        if (LsLineshow.length > 0) {
            document.getElementById("Boxl" + LsLineshow[0].IdLine).focus();
            ClickBoxLine(LsLineshow[0].IdLine);
        }

    }

    function ClickBoxLine(idline) {
        data = [];
        Lscountpoint = new Array();
        page = 1;
        let line = GetLine(idline);

        imgline.innerHTML = "";

        // Kiểm tra idline từ 1 đến 9 để đặt width và tỉ lệ
        let imgWidth = (idline >= 1 && idline <= 9) ? 1100 : 1800; // Width 1100px cho id 1-9, 1800px cho các id khác
        let imgRatio = (idline >= 1 && idline <= 9) ? 1800 / 1100 : 1; // Tỉ lệ 1800/1100 cho id 1-9

        // Tạo thẻ img với width tùy chỉnh
        imgline.innerHTML = `<img id="imgl" border="1px" style="width: ${imgWidth}px;" src="/image/${idline}.png?v=1.1"/>`;

        LoadInfomationLine(line);
        LoadLlsPointBox(line);
        displayPointsOnImage(line, imgRatio); // Truyền imgRatio vào hàm displayPointsOnImage
        UpdAllShow();
        Udhisofline();
        loadAllHistoryChartData();
    }

    let NameLineLb = document.getElementById("TxtnameLine");
    let IdIVILineLb = document.getElementById("TxtIdivi");
    let NameFloorLb = document.getElementById("TxtNameFloor");
    let NoteLineLb = document.getElementById("TxtNoteLine");

    function LoadInfomationLine(line) {
        NameLineLb.innerHTML = line.NameLine;
        IdIVILineLb.innerHTML = line.IdIviLine;
       // NameFloorLb.innerHTML = GetFloor(line.Floor).NameFloor;
        NoteLineLb.innerHTML = (line.Note ? line.Note : "");
    }

    let LsPointLinenow;

    let LsBoxPoint = document.getElementById("LsBoxPoint");

    let lineshownow;

    function LoadLlsPointBox(line) {

        lineshownow = line;

        LsPointLinenow = GetPointofline(line.IdLine);
        LsBoxPoint.innerHTML = '';
        let htmlinner = "";

        let htmlboxNLine = '<div id="BoxNameShow' + line.IdLine + '" class="home-container3 button"><span id="NLineBox' + line.IdLine + '" class="home-text01">' + line.IdIviLine + '</span></div>';

        htmlinner += htmlboxNLine;

        LsPointLinenow.forEach(function (point) {
            let htmlboxpointit = `
                <button id="Boxp${point.IdPoint}" type="button" class="home-button btn animationbase tooltipbox box-hidden" onclick="showNewChart(${point.IdPoint})">
                    <span id="Tooltippoint${point.IdPoint}" class="tooltiptext">${point.NamePoint}<br/>Note:${point.Note ? point.Note : ""}</span>
                    <span id="BoxpID${point.IdPoint}" class="home-text02">ID${point.IdPoint}</span>
                    <span id="BoxpSts${point.IdPoint}" class="home-text03 hidden">...</span>
                    <span id="BoxpName${point.IdPoint}" class="home-text031 two-line-ellipsis">${point.NamePoint}</span>
                </button>`;
            htmlinner += htmlboxpointit;
        });



        LsBoxPoint.innerHTML = htmlinner;

        setTimeout(ShowAnimationBoxPoint, 50);
    }
    function displayPointsOnImage(line, scaleFactor = 2.13) {
        let imgElement = document.getElementById("imgl");
        let clayout = document.getElementById("clayout");

        if (!imgElement) return;

        imgElement.onload = function () {
            document.querySelectorAll('[id^="pointCircle"]').forEach(function (point) {
                point.remove();
            });

            let imgRect = imgElement.getBoundingClientRect();
            let imgWidth = imgRect.width;
            let imgHeight = imgRect.height;

            let zoomFactor = 2; // Zoom ảnh lớn (không cần thay đổi)

            let containerWidth = clayout.offsetWidth;
            let offsetX = (containerWidth - imgWidth) / 2;

            LsPointLinenow.forEach(function (point) {
                // Điều chỉnh vị trí dựa trên scaleFactor
                let adjustedCssLeft = (point.LeftDetail / scaleFactor) + offsetX;
                let adjustedCssTop = point.TopDetail / scaleFactor;
                if (adjustedCssTop > 40) {
                    adjustedCssTop = 40;
                }
                let pointCircle = document.createElement("div");
                pointCircle.id = "pointCircle" + point.IdPoint;
                pointCircle.style.position = "absolute";
                pointCircle.style.width = "20px";
                pointCircle.style.height = "20px";
                pointCircle.style.left = adjustedCssLeft + "px";
                pointCircle.style.top = adjustedCssTop + "px";

                pointCircle.style.borderRadius = "50%";
                pointCircle.style.border = "1px solid gray";
                pointCircle.innerHTML = "<span class='pointcir'>" + point.IdPoint + "</span>";

                imgline.appendChild(pointCircle);
            });
        };

        // Kích hoạt onload ngay lập tức nếu ảnh đã được load
        if (imgElement.complete) {
            imgElement.onload();
        }
    }

    function ShowAnimationBoxPoint() {
        // Add animation class after the boxes are added to the DOM
        let boxes = document.querySelectorAll('.box-hidden');
        boxes.forEach((box, index) => {
            setTimeout(() => {
                box.classList.remove('box-hidden');
                box.classList.add('box-animated');
            }, index * 100); // Stagger the animation for each box
        });
        setTimeout(Clearclassbox, 600);
    }

    function Clearclassbox() {
        let boxes = document.querySelectorAll('.box-animated');
        boxes.forEach((box, index) => {
            setTimeout(() => {
                box.classList.remove('box-animated');
            }, index * 100); // Stagger the animation for each box
        });
    }

    let CboxFloorls = document.getElementById("CboxFloor");

    function UpdateStsLsLine() {
        CboxFloorls.innerHTML = "";
        let htmlinner = "";
        Allfloor.forEach(function (floor) {
            htmlinner += '<option value="' + floor.IdFloor + '">' + floor.NameFloor + '</option>';
        });
        CboxFloorls.innerHTML = htmlinner;
    }

    function UdrealtimeLines() {

    }

    // Update data to all box show
    function UpdateLineStatus(line, totalpointalarm, alarmline) {
        // Update boxline
        let boxline = document.getElementById("Boxl" + line.IdLine);
        if (boxline) {
            if (alarmline) {
                boxline.classList.add("alert-box-line");
            } else {
                boxline.classList.remove("alert-box-line");
            }
        }

        // Update line head name
        let lineheadname = document.getElementById("BoxNameShow" + line.IdLine);
        if (lineheadname) {
            if (alarmline) {
                lineheadname.classList.add("alert-head-line");
            } else {
                lineheadname.classList.remove("alert-head-line");
            }
        }
    }

    function UpdatePointLayout(point, Statusp, STS) {
        let Pointlayout = document.getElementById('Boxp' + point.IdPoint);
        if (Pointlayout) {
            // Clear old classes
            Pointlayout.classList.remove('ng-box-point', 'displc-box-point', 'alert-box-point', 'off-box-point', 'ok-box-point1');

            // Add new class based on status
            if (Statusp == 'NG') {
                Pointlayout.classList.add('ng-box-point');
            }
            else if (Statusp == 'DisConnect') {
                Pointlayout.classList.add('displc-box-point');
            }
            else if (Statusp == 'ERR') {
                Pointlayout.classList.add('alert-box-point');
            }
            else if (Statusp == 'OFF') {
                Pointlayout.classList.add('off-box-point');
            } else {
                Pointlayout.classList.add('ok-box-point1');
            }

            let BoxpSts = document.getElementById("BoxpSts" + point.IdPoint);
            if (STS.includes('DIS')) {
                BoxpSts.classList.add('alert-box-point-sts');
                STS = STS.substring(4);
            } else {
                BoxpSts.classList.remove('alert-box-point-sts');
            }
            BoxpSts.innerHTML = STS;
        }

        // Update pointCircle
        let pointCircleLayout = document.getElementById('pointCircle' + point.IdPoint);
        if (pointCircleLayout) {
            pointCircleLayout.classList.remove('alert-box-point1', 'off-box-point1', 'ok-box-point');
            if (Statusp == 'NG') {
                pointCircleLayout.classList.add('alert-box-point1');
            }
            else if (Statusp == 'DisConnect') {
                pointCircleLayout.classList.add('alert-box-point1');
            }
            else if (Statusp == 'ERR') {
                pointCircleLayout.classList.add('alert-box-point1');
            }
            else if (Statusp == 'OFF') {
                pointCircleLayout.classList.add('off-box-point1');
            } else {
                pointCircleLayout.classList.add('ok-box-point');
            }

            let CircleSts = document.getElementById("CircleSts" + point.IdPoint);
            if (CircleSts) {
                CircleSts.innerHTML = STS;
            }
        }
    }

    function UpdAllShow() {
        $.post('@Url.Action("GetAllpointNow", "ListPoints")', {},
            function (input) {
                if (input != "") {
                    let LsPointnow = JSON.parse(input);

                    LsLineshow.forEach(function (line) {
                        let totalpointalarm = 0;
                        let lspointofline = GetPointofline(line.IdLine);

                        for (let point of lspointofline) {
                            LsPointnow.some(function (pointnow) {
                                if (pointnow.IdPoint == point.IdPoint && pointnow.IdLine == point.IdLine) {
                                    let Statusp = GetStatusview(pointnow.Alarm);
                                    if (Statusp == 'NG' || Statusp == 'DisConnect' || Statusp == 'ERR') {
                                        totalpointalarm++;
                                    }

                                    if (lineshownow.IdLine == line.IdLine) {
                                        let STS = GetAlarm(pointnow.Alarm);
                                        UpdatePointLayout(point, Statusp, STS);
                                    }

                                    return true;
                                }
                            });
                        }

                        let alarmline = totalpointalarm > 0;
                        UpdateLineStatus(line, totalpointalarm, alarmline);
                    });
                }
            }
        );
    }



    function UdlegthArr(Arrinput, index, totaltime) {
        // Khởi tạo giá trị cho phần tử nếu nó chưa tồn tại
        if (!Arrinput[index]) {
            Arrinput[index] = { totalTime: 0, count: 0 };
        }

        if (totaltime) {
            if (index < Arrinput.length) {
                Arrinput[index].count += 1;
                Arrinput[index].totalTime += totaltime;
            } else {
                Arrinput[index].count += 1;
                Arrinput.push({ totalTime: 0, count: 1 });
                UdlegthArr(Arrinput, index, totaltime);
            }
        }

        return Arrinput;
    }

    let page = 1;
    let pageSize = 100;
    let Lscountpoint = new Array();

    let tabletophisdata = document.getElementById("dttopdataline");

    function Udhisofline() {
        if (lineshownow.IdLine) {
            idline = lineshownow.IdLine;
            Lscountpoint = new Array();
            tabletophisdata.innerHTML = "";
            let htmlinner = "";
            $.get('@Url.Action("GetPaginatedDataTable", "History")', {
                idline: idline,
                page: page,
                pageSize: pageSize
            },
                function (input) {
                    if (input != "") {
                        let Lsdatahisofline = input.items;

                        Lsdatahisofline.forEach(function (itemhis) {

                            let TotalTime = 'None';

                            if (itemhis.totalTime) {
                                let hours = Math.floor(itemhis.totalTime / 3600);
                                let minutes = Math.floor((itemhis.totalTime % 3600) / 60);
                                let remainingSeconds = itemhis.totalTime % 60;

                                // Định dạng thành chuỗi 00:00:00
                                TotalTime =
                                    String(hours).padStart(2, '0') + ':' +
                                    String(minutes).padStart(2, '0') + ':' +
                                    String(remainingSeconds).padStart(2, '0');
                            }

                            let TimeEnd = 'None';
                            if (itemhis.TimeStop) {
                                let Timeend_date = new Date(Date.parse(itemhis.timeStop));
                                TimeEnd = Timeend_date.toLocaleDateString() + " " + Timeend_date.toLocaleTimeString();
                            }

                            let stylealarm = "";

                            if (GetStatus(itemhis.alarm) == "NG") {
                                UdlegthArr(Lscountpoint, itemhis.idPoint, itemhis.totalTime);
                                stylealarm = 'font-weight:700;color:red;'
                            }
                            else {
                                stylealarm = 'font-weight:400;'
                            }

                            let Timeck_date = new Date(Date.parse(itemhis.timeCheck));
                            let Timeckstr = Timeck_date.toLocaleDateString() + " " + Timeck_date.toLocaleTimeString();

                            let point = GetPoint(itemhis.idPoint, itemhis.idLine);
                            let NamePoint = point ? point.NamePoint : "not exits";
                            let htmlrow = '<tr>' +
                                '<th style="font-weight:400;" >' + Timeckstr + '</th>' +
                                '<th style="font-weight:400;" >' + itemhis.idPoint + '</th>' +
                                '<th style="font-weight:400;" >' + NamePoint + '</th>' +
                                '<th style="' + stylealarm + '" >' + GetAlarm(itemhis.alarm) + '</th>' +
                                '<th style="font-weight:400;" >' + TotalTime + '</th>' +
                                '<th style="font-weight:400;" >' + TimeEnd + '</th>' +
                                '</tr>';

                            htmlinner += htmlrow;

                        });
                        tabletophisdata.innerHTML = htmlinner;

                    }
                }
            );
        }
    }
    function loadAllHistoryChartData() {
        const idLine = lineshownow.IdLine; // Lấy IdLine hiện tại

        if (idLine) {
            // Gọi API để lấy dữ liệu lịch sử
            $.get('@Url.Action("GetDataForChart", "History")', { idline: idLine }, function (input) {
                if (input && input.length > 0) {
                    input.forEach(function (itemhis) {

                        UdlegthArr(Lscountpoint, itemhis.idPoint, itemhis.idLine, itemhis.totalTime);
                    });

                    updateChart();
                }
            });
        }
    }



    //___________________________________________ LOAD FIRST ___________________________________________________

    Loadfirstall();
    const idLineFromViewBag = '@ViewBag.IdLine';
    async function Loadfirstall() {
        while (Allfloor == null || Userline == null || Userpoint == null) {
            await sleep(50);
        }
        //UpdateStsLsLine();
        if (Allfloor.length > 0) {
            Loadlsboxline(Allfloor[0].IdFloor);
            if (idLineFromViewBag) {
                ClickBoxLine(idLineFromViewBag);
            }
            setInterval(UpdAllShow, 5000);
            setInterval(Udhisofline, 60000);
        }
    }

</script>
