@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model WEB_SHOW_WRIST_STRAP.Dataconfig;

@{

}

<script src="~/lib/chart/chart.js"></script>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">

    <link rel="stylesheet" href="~/css/listview.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/history.css" asp-append-version="true" />
    <style>
        .scrollable-tbody {
            display: block;
            max-height: 570px; /* Chiều cao cố định cho tbody */
            overflow-y: auto; /* Tạo thanh cuộn */
        }

            .scrollable-tbody tr {
                display: table;
                width: 100%;
                table-layout: fixed;
            }

            .scrollable-tbody td, .scrollable-tbody th {
                width: 14.2857%; /* Chia đều cho 7 cột */
            }

        table thead, table tbody tr {
            display: table;
            width: 100%;
            table-layout: fixed;
        }

        table thead {
            width: calc(100% - 1em); /* Để tránh thanh cuộn ảnh hưởng đến thead */
        }
    </style>
</head>

<body>
    <div>
        <div class="home-container">

            @* <div id="LsBoxPoint" class="home-container2">
            <div class="home-container3 button">
            <span id="NLineBox" class="home-text01">IVI</span>
            </div>
            </div> *@
            <header class="header">
                <h2>HISTORY</h2>
            </header>
            <div class="home-container5" style="min-height:750px">

                <div id="ListboxLines" class="home-container6">

                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header card-header" style="color:darkcyan">
                                Search Tool
                            </div>
                            <div class="card-body">
                                <form id="searchForm" class="row g-3">
                                    <div class="col-10">
                                        <div class="row ">
                                            <div class="col-md-6">
                                                <label for="timeStart" class="form-label label">Start Time:</label>
                                                <input type="datetime-local" id="timeStart" name="timeStart" class="form-control">
                                            </div>
                                            <div class="col-md-6">
                                                <label for="timeEnd" class="form-label label">End Time:</label>
                                                <input type="datetime-local" id="timeEnd" name="timeEnd" class="form-control">
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6" hidden>
                                                <label for="floorSelect" class="form-label label">Floor:</label>
                                                <select id="floorSelect" name="floorSelect" class="form-select">
                                                    <option value="">All</option>
                                                    <option value="floor1">Floor1</option>
                                                    <option value="floor2">Florr2</option>
                                                    <!-- Thêm các tầng khác nếu cần -->
                                                </select>
                                            </div>
                                            <div class="col-md-6">
                                                <label for="lineSelect" class="form-label label">Line:</label>
                                                <select id="lineSelect" name="lineSelect" class="form-select">
                                                    <option value="">All</option>
                                                    <option value="line1">Line1</option>
                                                    <option value="line2">Line2</option>
                                                   
                                                </select>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-2 align-self-end">
                                        <button type="button" class="btn btn-primary search" onclick="Search()">Search</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!-- tổng hợp -->
                    <div class="in-for-his">
                        <div class="row" style="width:100%">
                            <p class="left-his-infor-title">Information</p>
                            <div class="col-6" style="font-size: 16px;">


                                <div class="ft-his-status-title" " >
                                    <span class="lable">Status:</span>
                                    <span id="Status" class="Statusled">OK</span>
                                </div>
                                <div class="IfmRoom" ">
                                    <span class="lable">Point Name:</span> <span id="NamePointshow">. . .</span>
                                </div>
                                <div class="IfmRoom" ">
                                    <span class="lable">Line:</span> <span id="LineShow">. . .</span>
                                </div>
                                <div class="IfmRoom" hidden>
                                    <span class="lable">Floor:</span> <span id="FloorShow">. . .</span>
                                </div>
                                
                            </div>
                            <div class="col-6" style="font-size: 16px; ;">
                                <div class="IfmRoom" style="display:none; ">
                                    <span>IdLog:</span> <span id="IdLog" style="font-weight: 400;">. . .</span>
                                </div>
                            
                                <div style="margin-bottom: 10px;">
                                    <span class="lable">Begin Time:</span> <span id="TimeBeginShow">. . .</span>
                                </div>
                                <div style="margin-bottom: 10px;">
                                    <span class="lable">End Time:</span> <span id="TimeEndShow">. . .</span>
                                </div>
                                <div style="margin-bottom: 10px;">
                                    <span class="lable">Total Time:</span> <span id="TotalTimeShow">. . .</span>
                                </div>
                            </div>
                        </div>

                        <div style="margin-top:20px">
                            <div style="display: flex; ">
                                <p style="margin-right:62.5%;margin-left:5px; margin-top:16px; font-weight:bold">Note</p>
                                <button class="btn btnExport animation" onclick="OpenExport()"></button>
                                <button style="margin-left:1%;" class="btn btn-success animation" onclick="btnsavenote()">Update Note</button>
                               
                            </div>
                            <div style="display:flex; margin-top: 10px;">
                                <div id="displayNote" class="savedalarm" style="font-size:14px; padding:6px; width: calc(72ch + 12px); height:200px; overflow-y: auto; white-space: pre-wrap; margin-left: 5px;"></div>
                               
                            </div>
                        </div>
                    </div>

                </div>
                <div class="home-text27-1"></div>
                <div class="home-text27">History Data</div>
                <div class="home-container7" style="display:flex">
                    <div class="divchart">
                        <canvas id="myChart" class="ChartAlarm"></canvas>
                    </div>
                    <div class="divtbtopalarm">
                        <table class="table table-striped table-bordered">
                            <thead>
                                <tr>
                                    <th colspan="7" class="titletable">History <button class="btn btnExporttable" onclick="ExportData()"></button></th>
                                </tr>
                                <tr style="background-color:#888">
                                    <th>Begin Time </th>
                                    <th>Point ID</th>
                                    <th>Point Name </th>
                                    <th>Line Name</th>
                                    <th>Status</th>
                                    <th>Total Time</th>
                                    <th>End Time</th>
                                </tr>
                                <tr>
                                    <th></th>
                                    <th>
                                        <input type="text" id="filter-idPoint" class="form-control" onkeyup="filterTable()">
                                    </th>
                                    <th>
                                        <input type="text" id="filter-namePoint" class="form-control" onkeyup="filterTable()">
                                    </th>
                                    <th>
                                        <input type="text" id="filter-nameLine" class="form-control" onkeyup="filterTable()">
                                    </th>
                                    <th>
                                        <input type="text" id="filter-status" class="form-control" onkeyup="filterTable()">
                                    </th>
                                    <th>
                                        <select class="form-control filter" data-column="0" id="filter-totaltime" onchange="filterTable()" >
                                            <option value="">All</option>
                                            <option value="under15">under 15 m</option>
                                            <option value="15to30">15 to 30 m</option>
                                            <option value="over30">over 30 m</option>
                                        </select>
                                    </th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="dttopdataline" class="scrollable-tbody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

<script>

        let Lscountpoint = {}; 
        let page = 1;
        let pageSize = 15;
        let loading = false;
        let totalPages = 1; 
        let tabletophisdata = document.getElementById("dttopdataline");

        function GetHistoryTableData() {
            const timeStart = new Date(document.getElementById("timeStart").value);
            const timeEnd = new Date(document.getElementById("timeEnd").value);
            const floorSelect = document.getElementById("floorSelect").value;
            const lineSelect = document.getElementById("lineSelect").value;
            const selectedOption = localStorage.getItem('selectedOption');
            let apiUrl = '@Url.Action("GetHistory", "History")';

            if (selectedOption === "LakeageVoltage") {
                apiUrl = '@Url.Action("GetHistory2", "History")';
            }
            loading = true;
            $.get(apiUrl, {
                timeStart: timeStart.toISOString(),
                timeEnd: timeEnd.toISOString(),
                floorSelect: floorSelect,
                lineSelect: lineSelect,
                page: page,
                pageSize: pageSize
            }, function (input) {
               
                if (input && input.items.length > 0) {
                    // Cập nhật totalPages từ phản hồi
                    totalPages = input.totalPages;

                    let htmlinner = "";
                    input.items.forEach(function (itemhis) {
                        let TotalTime = 'None';

                        if (itemhis.totalTime) {
                            let hours = Math.floor(itemhis.totalTime / 3600);
                            let minutes = Math.floor((itemhis.totalTime % 3600) / 60);
                            let remainingSeconds = itemhis.totalTime % 60;
                            TotalTime =
                                String(hours).padStart(2, '0') + ':' +
                                String(minutes).padStart(2, '0') + ':' +
                                String(remainingSeconds).padStart(2, '0');
                        }

                        let TimeEnd = 'None';
                        if (itemhis.timeStop) {
                            let Timeend_date = new Date(Date.parse(itemhis.timeStop));
                            TimeEnd = Timeend_date.toLocaleDateString() + " " + Timeend_date.toLocaleTimeString();
                        }

                        let stylealarm = "";
                        if (GetStatus(itemhis.alarm) == "NG") {
                            // UdlegthArr(Lscountpoint, itemhis.idPoint, itemhis.idLine, itemhis.totalTime);
                            stylealarm = 'font-weight:400;color:red;';
                        } else {
                            stylealarm = 'font-weight:400;';
                        }

                        let Timeck_date = new Date(Date.parse(itemhis.timeCheck));
                        let Timeckstr = Timeck_date.toLocaleDateString() + " " + Timeck_date.toLocaleTimeString();
                        let point = GetPoint(itemhis.idPoint, itemhis.idLine);
                        let namePoint = point ? point.NamePoint : "None";

                        let idfloor = GetLine(itemhis.idLine).Floor;
                        let floorName = GetFloor(idfloor).NameFloor;
                        let htmlrow = '<tr onclick="selectRow(this)" data-id="' + itemhis.idPoint + '" data-idlog="' + itemhis.idLog + '" data-name="' + namePoint + '" data-line="' + GetLine(itemhis.idLine).NameLine + '" data-floor="' + floorName + '" data-note="' + itemhis.note + '" data-timebegin="' + Timeckstr + '" data-status="' + GetAlarm(itemhis.alarm) + '" data-timeend="' + TimeEnd + '" data-totaltime="' + TotalTime + '">' +
                            '<th style="font-weight:400;">' + Timeckstr + '</th>' +
                            '<th style="font-weight:400;">' + itemhis.idPoint + '</th>' +
                            '<th style="font-weight:400;">' + namePoint + '</th>' +
                            '<th style="font-weight:400;">' + GetLine(itemhis.idLine).NameLine + '</th>' +
                            '<th style="' + stylealarm + '">' + GetAlarm(itemhis.alarm) + '</th>' +
                            '<th style="font-weight:400;">' + TotalTime + '</th>' +
                            '<th style="font-weight:400;">' + TimeEnd + '</th>' +
                            '</tr>';

                        htmlinner += htmlrow;
                    });

                    tabletophisdata.innerHTML += htmlinner;
                    filterTable();
                }
            

                loading = false;
            });
        }


        function selectRow(row) {
            const rows = document.querySelectorAll('#dttopdataline tr');
            rows.forEach(r => {
                r.style.backgroundColor = '';
            });
          

            // Thêm style trực tiếp vào hàng được chọn
            row.style.backgroundColor = 'aqua';
            document.getElementById('IdLog').innerText = row.getAttribute('data-idLog');
            document.getElementById('IdPoint').innerText = row.getAttribute('data-id');
            document.getElementById('NamePointshow').innerText = row.getAttribute('data-name');
            document.getElementById('LineShow').innerText = row.getAttribute('data-line');
            document.getElementById('FloorShow').innerText = row.getAttribute('data-floor');

            let noteContent = row.getAttribute('data-note').split('\n').join('<hr>');

            // Tách phần trước và sau dấu phẩy đầu tiên
            let firstCommaIndex = noteContent.indexOf(',', noteContent.indexOf(' '));
            let beforeComma = noteContent.slice(0, firstCommaIndex + 1);
            let afterComma = noteContent.slice(firstCommaIndex + 1).trim();

            // Thêm strong cho phần trước dấu phẩy
            beforeComma = beforeComma.replace(/, (.+)/, ', <strong>$1</strong>');

            // Xử lý tất cả các "Reason:" và "Solution:" trong phần afterComma
            afterComma = afterComma.replace(/Reason:/g, '<br><strong>Reason:</strong>')
                .replace(/Solution:/g, '<br><strong>Solution:</strong>');

            let finalContent = beforeComma + ' ' + afterComma;

            document.getElementById('displayNote').innerHTML = finalContent;

            document.getElementById('TimeBeginShow').innerText = row.getAttribute('data-timebegin');
            document.getElementById('TimeEndShow').innerText = row.getAttribute('data-timeend');
            document.getElementById('TotalTimeShow').innerText = row.getAttribute('data-totaltime');
            // Lấy giá trị của thuộc tính data-status từ phần tử row
            let status = row.getAttribute('data-status');
            let statusElement = document.getElementById('Status');
            statusElement.innerText = status;
            statusElement.style.color = ['OK', 'WAIT', 'OFF'].includes(status) ? '' : 'red';

        }

        function loadAllHistoryChartData() {

            const timeStart = new Date(document.getElementById("timeStart").value);
            const timeEnd = new Date(document.getElementById("timeEnd").value);
            const floorSelect = document.getElementById("floorSelect").value;
            const lineSelect = document.getElementById("lineSelect").value;
            const selectedOption = localStorage.getItem('selectedOption');
            let apiUrl = '@Url.Action("GetHistoryChartData", "History")';

            if (selectedOption === "LakeageVoltage") {
                apiUrl = '@Url.Action("GetHistoryChartData2", "History")';
            }
            $.get(apiUrl, {
                timeStart: timeStart.toISOString(),
                timeEnd: timeEnd.toISOString(),
                floorSelect: floorSelect,
                lineSelect: lineSelect
            }, function (input) {
                //console.log(input);
                if (input && input.length > 0) {
                    input.forEach(function (itemhis) {
                      
                        UdlegthArr(Lscountpoint, itemhis.idPoint, itemhis.idLine, itemhis.totalTime);
                    });

                    updateChart(); 
                }

                loading = false;
            });
        }
        function txtalchage() {
            document.getElementById("txtnoteAlarm").classList.remove('savedalarm');
        }
        //Event Click Btn Save Note alarm
        function btnsavenote() {
            let IDLOG = document.getElementById("IdLog").innerText;
            if (IDLOG != null) {
                // Hiển thị modal với 2 textarea cho Reason và Solution
                let modalContent = `
                    <div class="modal fade" id="noteModal" tabindex="-1" aria-labelledby="noteModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="noteModalLabel">Add Note</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="mb-3">
                                        <label for="reason${IDLOG}" class="form-label">Reason</label>
                                        <textarea class="form-control" id="reason${IDLOG}" rows="3"></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label for="solution${IDLOG}" class="form-label">Solution</label>
                                        <textarea class="form-control" id="solution${IDLOG}" rows="3"></textarea>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-primary" onclick="submitInput(${IDLOG})">Save</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                // Thêm modal vào body
                document.body.insertAdjacentHTML('beforeend', modalContent);

                // Hiển thị modal
                let noteModal = new bootstrap.Modal(document.getElementById('noteModal'), {});
                noteModal.show();
            } else {
                alert('Note is not selected!');
            }
        }

        function submitInput(id_log) {
            let reason = document.getElementById(`reason${id_log}`).value;
            let solution = document.getElementById(`solution${id_log}`).value;

            let note = `Reason: ${reason}, Solution: ${solution}`;
            const selectedOption = localStorage.getItem("selectedOption");
            let apiUrl = '@Url.Action("UpdateNote", "History")';

            if (selectedOption === "LakeageVoltage") {
                apiUrl += "2"; 
            }

            $.post(apiUrl, { id: id_log, note: note }, function (response) {
                if (response.success) {
                   
                    alert("Lưu thành công!");
                } else {
                    alert("Lưu thất bại!");
                }
            });

            // Ẩn modal sau khi lưu
            let noteModal = bootstrap.Modal.getInstance(document.getElementById('noteModal'));
            noteModal.hide();
        }


        function ExportData() {
            const timeStart = new Date(document.getElementById("timeStart").value);
            const timeEnd = new Date(document.getElementById("timeEnd").value);
            const floorSelect = document.getElementById("floorSelect").value;
            const lineSelect = document.getElementById("lineSelect").value;

            const timeStartISO = timeStart.toISOString();
            const timeEndISO = timeEnd.toISOString();
            const selectedOption = localStorage.getItem("selectedOption");
            let apiUrl = '@Url.Action("ExportToExcel", "History")';

            if (selectedOption === "LakeageVoltage") {
                apiUrl += "2";  // Thêm "2" vào cuối URL nếu selectedOption là "LakeageVoltage"
            }

            // Gọi API để xuất dữ liệu
            $.ajax({
                url: apiUrl,
                type: 'GET',
                data: {
                    timeStart: timeStartISO,
                    timeEnd: timeEndISO,
                    floorSelect: floorSelect,
                    lineSelect: lineSelect
                },
                xhrFields: {
                    responseType: 'blob' // Để xử lý dữ liệu trả về dạng file
                },
                success: function (response) {
                    const url = window.URL.createObjectURL(response);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'dataExport.xlsx'; 
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);
                },
                error: function (xhr, status, error) {
                    alert("Có lỗi xảy ra khi xuất dữ liệu: " + error);
                }
            });
        }

        function Search() {
            const timeStart = new Date(document.getElementById("timeStart").value);
            const timeEnd = new Date(document.getElementById("timeEnd").value);
            const sixMonthsInMillis = 6 * 30 * 24 * 60 * 60 * 1000; // 6 months in milliseconds

            if ((timeEnd - timeStart) > sixMonthsInMillis) {
                alert("Thời gian nhập vào tối đa là 6 tháng.");
                return;
            }

            const floorSelect = document.getElementById("floorSelect").value;
            const lineSelect = document.getElementById("lineSelect").value;
            console.log(lineSelect);
            Lscountpoint = [];
            tabletophisdata.innerHTML = "";
            page = 1;
            hasMoreData = true;
            GetHistoryTableData();
            
            loadAllHistoryChartData();
        }


        function UdlegthArr(Arrinput, idPoint, idLine, totaltime) {
            if (totaltime) {
                const key = `${idPoint}-${idLine}`; // Tạo một khóa duy nhất cho mỗi cặp idPoint và idLine

                // Khởi tạo giá trị cho phần tử nếu nó chưa tồn tại
                if (!Arrinput[key]) {
                    Arrinput[key] = { totalTime: 0, count: 0 };
                }

                // Cập nhật tổng thời gian và số lần
                Arrinput[key].totalTime += totaltime;
                Arrinput[key].count += 1;
            }

            return Arrinput;
        }


    // Hàm tạo màu ngẫu nhiên không gần màu xanh lá
    function getRandomColor() {
        let color;
        do {
            const letters = '0123456789ABCDEF';
            color = '#';
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
        } while (isCloseToGreen(color));
        return color;
    }

    // Kiểm tra màu gần xanh lá
    function isCloseToGreen(color) {
        const rgb = parseInt(color.slice(1), 16);
        const r = (rgb >> 16) & 0xff;
        const g = (rgb >> 8) & 0xff;
        const b = (rgb >> 0) & 0xff;
        return g > r && g > b;
    }

    // Hàm tính toán barThickness
    function calculateBarThickness(numBars) {
        const barThickness = Math.max(minBarThickness, Math.min(maxBarThickness, maxBarThickness - (numBars - 1) * 5));
        return barThickness;
    }

    // Hàm cập nhật đồ thị

        let data = [];

        const ctx = document.getElementById('myChart').getContext('2d');
        const maxBarThickness = 50; // Giá trị tối đa cho barThickness
        const minBarThickness = 10; // Giá trị tối thiểu cho barThickness

        const myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: data.map(item => item.label),
                datasets: [{
                    label: 'Dataset 1',
                    data: data.map(item => item.value),
                    backgroundColor: [
                        'rgba(255, 0, 0, 1)', // Đỏ
                        'rgba(255, 255, 0, 1)' // Vàng
                    ],
                    borderColor: 'rgba(0, 0, 0, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        beginAtZero: true,
                        title: { display: true, text: 'Time Alarm (min)', color: 'white' },
                        ticks: { color: 'white' }
                    },
                    y: {
                        title: { display: true, text: '', color: 'white' },
                        ticks: { autoSkip: false, color: 'white' }
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            boxWidth: 0 // Ẩn ô màu
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                const item = data[tooltipItem.dataIndex];
                                const totalSeconds = item.value * 60; // Giả sử dữ liệu trong phút
                                const formattedTime = formatTime(totalSeconds);
                                return `${formattedTime} (${item.count} lần)`; // Hiển thị thời gian và số lần
                            }
                        }
                    }
                }
            }
        });

        function formatTime(totalSeconds) {
            totalSeconds = Math.round(totalSeconds);

            let hours = Math.floor(totalSeconds / 3600);
            let minutes = Math.floor((totalSeconds % 3600) / 60);
            let remainingSeconds = totalSeconds % 60;

            return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;
        }
        function updateChart() {
            if (Lscountpoint && Object.keys(Lscountpoint).length > 0) {
                const lineSelect = document.getElementById("lineSelect").value;
                if (lineSelect == "") {
                    // Tổng hợp dữ liệu theo từng line
                    const lineData = {};
                    Object.keys(Lscountpoint).forEach(key => {
                        const [, idLine] = key.split('-').map(Number);
                        if (!lineData[idLine]) {
                            lineData[idLine] = { totalTime: 0, count: 0 };
                        }
                        lineData[idLine].totalTime += Lscountpoint[key].totalTime;
                        lineData[idLine].count += Lscountpoint[key].count;
                    });
                  
                    const chartData = Object.keys(lineData).map(idLine => {
                        return {
                            
                            label: ` ${GetLine(idLine).IdIviLine}`, // Gắn nhãn theo line
                            value: lineData[idLine].totalTime / 60, // Chuyển đổi thành phút
                            count: lineData[idLine].count
                        };
                    });

                    data = chartData.sort((a, b) => b.value - a.value);
                } else {
                    // Hiển thị dữ liệu theo từng điểm của line cụ thể
                    const chartData = Object.keys(Lscountpoint).map(key => {
                        const [idPoint, idLine] = key.split('-').map(Number);
                        return {
                            label: idPoint,
                            value: Lscountpoint[key].totalTime / 60,
                            count: Lscountpoint[key].count
                        };
                    });

                    data = chartData.sort((a, b) => b.value - a.value);
                }

                // Cập nhật biểu đồ
                myChart.data.labels = data.map(item => item.label);
                myChart.data.datasets[0].data = data.map(item => item.value);

                // Màu ngẫu nhiên và cập nhật barThickness
                const backgroundColorGradient = data.map((item, index) => {
                    const percent = index / data.length;
                    return getGradientColor('#99fa9d', '#E0FFF5', percent);
                });

                myChart.data.datasets[0].backgroundColor = backgroundColorGradient;
                const barThickness = calculateBarThickness(data.length);
                myChart.data.datasets[0].barThickness = barThickness;

                // Cập nhật biểu đồ
                myChart.update();
            }
        }

        // Hàm tạo màu xanh ngọc nhạt dần
        function getGradientColor(startColor, endColor, percent) {
            const start = hexToRgb(startColor);
            const end = hexToRgb(endColor);

            const r = Math.round(start.r + percent * (end.r - start.r));
            const g = Math.round(start.g + percent * (end.g - start.g));
            const b = Math.round(start.b + percent * (end.b - start.b));

            return `rgba(${r}, ${g}, ${b}, 1)`;
        }

        // Chuyển đổi mã hex thành đối tượng RGB
        function hexToRgb(hex) {
            const bigint = parseInt(hex.slice(1), 16);
            const r = (bigint >> 16) & 255;
            const g = (bigint >> 8) & 255;
            const b = bigint & 255;
            return { r, g, b };
        }



        // Hàm tạo màu ngẫu nhiên
        function getRandomColor() {
            const letters = '0123456789ABCDEF';
            let color = '#';
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        // Tính toán barThickness (nếu cần thiết)
        function calculateBarThickness(length) {
            // Ví dụ tính toán barThickness tùy thuộc vào số lượng dữ liệu
            return Math.max(10, Math.min(50, 100 / length));
        }
        document.querySelector('.scrollable-tbody').addEventListener('scroll', function () {
            if (this.scrollTop + this.clientHeight >= this.scrollHeight) {
                if (!loading && page <= totalPages) {
                    GetHistoryTableData();
                }
            }
        });
    function OpenExport() {
        let url = "/History/LogExport";
        window.open(url, 'LOG', 'width=600,height=400');
    }
        function PopulateFloorSelect() {
            const floorSelect = document.getElementById('floorSelect');
            floorSelect.innerHTML = ''; // Xóa các tùy chọn hiện tại

            // Thêm tùy chọn mặc định "All"
            let defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.text = 'All';
            floorSelect.appendChild(defaultOption);

            Allfloor.forEach(floor => {
                let option = document.createElement('option');
                option.value = floor.IdFloor;
                option.text = floor.NameFloor;
                floorSelect.appendChild(option);
            });
        }
        function PopulateLineSelect() {
            const lineSelect = document.getElementById('lineSelect');

            lineSelect.innerHTML = ''; // Xóa các tùy chọn hiện tại

            // Thêm tùy chọn mặc định "All"
            let defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.text = 'All';
            lineSelect.appendChild(defaultOption);

            Userline.forEach(line => {
                let option = document.createElement('option');
                option.value = line.IdLine;
                option.text = line.NameLine;
                lineSelect.appendChild(option);
            });
        }

        function PopulateLineSelectByFloor(idfloor) {
            const lineSelect = document.getElementById('lineSelect');
            lineSelect.innerHTML = ''; // Xóa các tùy chọn hiện tại

            // Thêm tùy chọn mặc định "All"
            let defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.text = 'All';
            lineSelect.appendChild(defaultOption);

            let userLinesByFloor = GetUserLineofFloor(idfloor);
            userLinesByFloor.forEach(line => {
                let option = document.createElement('option');
                option.value = line.IdLine;
                option.text = line.NameLine;
                lineSelect.appendChild(option);
            });
        }
        document.addEventListener('DOMContentLoaded', function () {
            GetAllFloor();
            GetAllLine();

            // Sau khi dữ liệu được tải, cập nhật các thẻ <select>
            setTimeout(() => {
                PopulateFloorSelect();
                PopulateLineSelect();
            }, 1000); // Điều chỉnh thời gian chờ phù hợp nếu cần

            // Thêm sự kiện thay đổi cho thẻ floorSelect để cập nhật lineSelect theo sàn được chọn
            document.getElementById('floorSelect').addEventListener('change', function () {
                const selectedFloorId = this.value;
                if (selectedFloorId) {
                    PopulateLineSelectByFloor(selectedFloorId);
                } else {
                    PopulateLineSelect();
                }
            });
            
        });
        function filterTable() {
           
           
            const idPointFilter = document.getElementById("filter-idPoint").value.toLowerCase();
            const namePointFilter = document.getElementById("filter-namePoint").value.toLowerCase();
            const nameLineFilter = document.getElementById("filter-nameLine").value.toLowerCase();
            const statusFilter = document.getElementById("filter-status").value.toLowerCase();
            const totalTimeElement = document.getElementById('filter-totaltime').value;
            const totalTimeFilter = totalTimeElement ? totalTimeElement.value : '';

            Array.from(tabletophisdata.getElementsByTagName("tr")).forEach(function (row) {
                const idPoint = row.cells[1].textContent.toLowerCase();
                const namePoint = row.cells[2].textContent.toLowerCase();
                const nameLine = row.cells[3].textContent.toLowerCase();
                const status = row.cells[4].textContent.toLowerCase();
                const totalTime = row.cells[5].textContent;
                var timeParts = totalTime.split(':');
                var totalM = parseInt(timeParts[0]) * 60 + parseInt(timeParts[1]) + parseInt(timeParts[2]) / 60;
                var totalMinutes = totalM;
                let showRow = true;

                if (idPointFilter && !idPoint.includes(idPointFilter)) {
                    showRow = false;
                }
                if (namePointFilter && !namePoint.includes(namePointFilter)) {
                    showRow = false;
                }
                if (nameLineFilter && !nameLine.includes(nameLineFilter)) {
                    showRow = false;
                }
                if (statusFilter && !status.includes(statusFilter)) {
                    showRow = false;
                }
                if (totalTimeElement) {
                   
                    if (totalTimeElement === "under15" && totalMinutes >= 15) {
                        showRow = false;
                    } else if (totalTimeElement === "15to30" && (totalMinutes < 15 || totalMinutes > 30)) {
                        showRow = false;
                    } else if (totalTimeElement === "over30" && totalTimeMinutes <= 30) {
                        showRow = false;
                    }
                }

                row.style.display = showRow ? "" : "none";
            });
            const rows = Array.from(document.getElementById("dttopdataline").getElementsByTagName("tr"));
            const visibleRows = rows.filter(row => row.style.display !== "none");

            if (visibleRows.length == 0 && page <= totalPages) {
                GetHistoryTableData();


            }
            if (visibleRows.length < pageSize && page <= totalPages) {
                GetHistoryTableData();
                page++;
            }
        }
        
</script>
</body>
