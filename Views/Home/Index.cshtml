@using WEB_SHOW_WRIST_STRAP.Controllers;
@model WEB_SHOW_WRIST_STRAP.Dataconfig;
@{
    ViewData["Title"] = "Home Page";
}

@if (TempData["AlertMessage"] != null)
{
    <div id="AlertBox" class="alert @TempData["AlertType"] hide" role="alert">
        @TempData["AlertMessage"]
    </div>
}
<style>
    .scrollable-tbody {
        display: block;
        max-height: 46.3vh;
        overflow-y: auto;
    }

        .scrollable-tbody tr {
            display: table;
            width: 100%;
            table-layout: fixed;
        }

        .scrollable-tbody td, .scrollable-tbody th {
            width: 25%;
        }

    table thead, table tbody tr {
        display: table;
        width: 100%;
        table-layout: fixed;
    }

    /* CSS cho point và lớp màng */
    .point-wrapper {
        position: absolute;
        display: inline-block;
    }

    .point-overlay {
        position: relative;
        background: rgba(0, 0, 0, 0); /* Trong suốt mặc định */
        border: none; /* Không viền mặc định */
        display: flex;
        justify-content: center;
        align-items: center;
        min-width: 30px;
        min-height: 30px;
        transition: background 0.5s ease-in-out; /* Chuyển màu mượt mà */
    }

    .pointinline-di {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%); /* Căn giữa hoàn toàn */
        cursor: pointer;
        z-index: 1;
        padding: 2px 5px;
    }

    /* Class mới cho overlay khi alarm */
    .point-overlay-alarm {
        animation: fadeOverlay 1.5s infinite ease-in-out; /* Hiệu ứng nháy mờ */
    }

    /* Hiệu ứng nháy mờ cho lớp màng */
    @@keyframes fadeOverlay {
        0% {
            background: rgba(255, 0, 0, 0.1); /* Mờ nhạt */
        }

        50% {
            background: rgba(255, 0, 0, 0.3); /* Đậm hơn */
        }

        100% {
            background: rgba(255, 0, 0, 0.1); /* Quay lại mờ nhạt */
        }
    }
</style>

<div style="">
    <div style="display: flex; align-items: center; justify-content: space-between;">
        <select class="input cboxFloor animation" name="bell" id="cbfloor" onchange="cboxchange(this.value)" style="display:none">
        </select>
        <span style="font-weight: 700; font-size: 27px; margin-left: 40%">GROUNDING SYSTEM</span>
        <div style="display: flex; flex-direction: column;" class="total-ok">
            <div id="total-ok"></div>
        </div>
    </div>

    <div style="position: relative; display: inline-block;">
        <div id="IMGIVI" style="display: block;"></div>
        <div class="overlay"></div>
        <div class="log-box" id="logBox" style="display:none">
            <table class="table table-striped">
                <thead>
                    <tr style="background-color:#888">
                        <th>Time</th>
                        <th>Line</th>
                        <th>Point</th>
                        <th>Alarm</th>
                    </tr>
                </thead>
                <tbody id="dtalarmallview" class="scrollable-tbody"></tbody>
            </table>
        </div>
    </div>
    <div id="Layout_lines"></div>
</div>

<script>
    let Layout_lines = document.getElementById("Layout_lines");
    let cboxfloor = document.getElementById("cbfloor");
    let ImgIVI = document.getElementById("IMGIVI");

    async function LoadAreaUser() {
        if (Allfloor == null) {
            setTimeout(LoadAreaUser, 50);
        } else {
            await sleep(10);
            Allfloor.forEach(function (floor) {
                cboxfloor.innerHTML += '<option value="' + floor.IdFloor + '">' + floor.NameFloor + '</option>';
            });
            if (Allfloor.length > 0) {
                cboxfloor.selectedIndex = 0;
                while (Userline == null || Userpoint == null) await sleep(50);
                cboxchange(Allfloor[0].IdFloor);
            }
        }
    }

    let idfloorNow;
    let lslineofFloor;

    function cboxchange(idfloor) {
        lslineofFloor = GetUserLineofFloor(idfloor);
        idfloorNow = idfloor;
        ImgIVI.innerHTML = "";
        const img = document.createElement('img');
        img.id = "myImage";
        img.style.border = "1px solid";
        img.style.width = "1800px";
        img.style.height = "auto";
        img.style.objectFit = "contain";
        img.src = "/image/" + cboxfloor.options[cboxfloor.selectedIndex].text + ".png?v=2.6";
        img.onload = calculateDistance;
        ImgIVI.appendChild(img);
        Updatelayoutline(idfloor);
    }

    let IDlsboxshow = new Array();

    function Updatelayoutline(value) {
        if (Userline == null || lslineofFloor == null) {
            setTimeout(Updatelayoutline, 50, value);
        } else {
            Layout_lines.innerHTML = "";
            let htmlinter = "";
            lslineofFloor.forEach(function (line) {
                let ID = line.IdLine;
                let Nameline = line.NameLine;
                let XYBox = GetXYLine(ID);

                let htmlinterbefore =
                    '<div onclick="Clickline(' + ID + ')" name="boxlayoutline" id="boxline' + ID +
                    '" class="boxline" style="top: ' + XYBox[0] + 'px; left: ' + XYBox[1] +
                    'px; width: ' + XYBox[2] + 'px; height: ' + XYBox[3] + 'px">' +
                    '<div id="boxline' + ID + 'head" class="boxlinehead">' +
                    '<p id="boxline' + ID + 'ivi" class="boxlinehead-a">' +
                    (line.IdIviLine ? line.IdIviLine : 'IVI') + '</p></div>';

                let htmlinterafter = '</div>';

                let lspointline = GetPointofline(ID);
                let htmllinemid = "";
                lspointline.forEach(function (point) {
                    let pointValue = point.Value ? point.Value : '...';
                    let pv = 127;
                    let min = 10;
                    let max = 60;

                    htmllinemid +=
                        `<div class="point-wrapper" id="point${point.IdLine}_${point.IdPoint}" style="top:${point.Csstop}px; left:${point.Cssleft}px">
                                <div class="point-overlay" style="width:${point.Width || 50}px; height:${point.Height || 50}px"></div>
                                <div name="point" class="pointinline-di"
                                     onmouseover="showTooltip(this, 'Name: Point${point.NamePoint}<br>Value: <strong>${pv}</strong><br>Min~Max: ${min} ~ ${max}<br>Status:<strong> ${pointValue}</strong>')"
                                     onmouseout="hideTooltip()">
                                    <p class="pointinline-di-a">${point.IdPoint}</p>
                                </div>
                            </div>`;
                });

                htmlinter += (htmlinterbefore + htmllinemid + htmlinterafter);
            });

            Layout_lines.innerHTML = htmlinter;
        }
    }

    function showTooltip(element, text) {
        let tooltip = document.getElementById('tooltip');
        if (!tooltip) {
            tooltip = document.createElement('div');
            tooltip.id = 'tooltip';
            tooltip.className = 'tooltippp';
            document.body.appendChild(tooltip);
        }
        tooltip.innerHTML = text;

        let rect = element.getBoundingClientRect();
        tooltip.style.top = (rect.top - tooltip.offsetHeight + 35) + 'px';
        tooltip.style.left = (rect.left + (rect.width / 2) - (tooltip.offsetWidth / 2)) + 'px';
        tooltip.style.display = 'block';
    }

    function hideTooltip() {
        let tooltip = document.getElementById('tooltip');
        if (tooltip) {
            tooltip.style.display = 'none';
        }
    }

    function calculateDistance() {
        const img = document.getElementById('myImage');
        const logBox = document.getElementById('logBox');
        const scrollableTbody = document.querySelector('.scrollable-tbody');
        if (img) {
            const imgWidthr = img.getBoundingClientRect();
            const imgHeight = img.offsetHeight;
            const windowWidth = ImgIVI.offsetWidth;
            const imgWidth = img.offsetWidth;
            const distance = windowWidth - imgWidthr.right + 180;
            const widthb = imgWidth / 3.171;
            const heightb = imgHeight / 1.532;

            if (idfloorNow == 3) {
                logBox.style.right = `${distance}px`;
                logBox.style.width = `${widthb}px`;
                logBox.style.height = `${heightb}px`;
                logBox.style.display = 'block';
                scrollableTbody.style.maxHeight = `${heightb * 0.84}px`;
                Clinknotifibtn();
            } else {
                logBox.style.display = 'none';
            }
        } else {
            console.warn('Không tìm thấy thẻ img với id "myImage".');
        }
    }

    function Clickline(ID) {
        window.location.href = '/ListView/Detail?IdLine=' + ID;
    }

    let ngLineCount = 0;
    let totalLines = 0;

    function Updatalsbox() {
        $.post('@Url.Action("GetAllpointNow", "ListPoints")', {}, function (input) {
            if (input != "") {
                let LsPointnow = JSON.parse(input);
                ngLineCount = 0;
                totalLines = lslineofFloor.length;

                lslineofFloor.forEach(function (line) {
                    let totalpointalarm = 0;
                    let lspointofline = GetPointofline(line.IdLine);

                    for (let point of lspointofline) {

                        LsPointnow.some(function (pointnow) {
                            if (pointnow.IdPoint == point.IdPoint && pointnow.IdLine == point.IdLine) {
                                let Statusp = GetStatus(pointnow.Alarm);
                                let Pointlayout = document.getElementById('point' + point.IdLine + '_' + point.IdPoint);
                                if (Pointlayout) {
                                    let pointElement = Pointlayout.querySelector('.pointinline-di');
                                    let overlayElement = Pointlayout.querySelector('.point-overlay'); // Lấy overlay

                                    // Xóa class cũ
                                    pointElement.classList.remove('pointalarm');
                                    pointElement.classList.remove('pointoff');
                                    overlayElement.classList.remove('point-overlay-alarm');

                                    // Thêm class khi alarm
                                    if (Statusp == 'NG') {
                                        pointElement.classList.add('pointalarm');
                                        overlayElement.classList.add('point-overlay-alarm'); // Thêm class cho overlay
                                        totalpointalarm++;
                                    } else if (Statusp == 'OFF') {
                                        pointElement.classList.add('pointoff');
                                    }

                                    let value = GetAlarm(pointnow.Alarm) || "OFF";
                                    let min = pointnow.MinSpect || 0;
                                    let max = pointnow.MaxSpect || 6;
                                    let pv = pointnow.Value || 0;

                                    pointElement.setAttribute("onmouseover",
                                        `showTooltip(this, 'Name: Point${point.NamePoint}<br>Value: <strong>${pv}</strong><br>Min~Max: ${min} ~ ${max}<br>Status:<strong> ${value}</strong>')`);
                                }
                                return true;
                            }
                        });
                    }

                    let alarmline = totalpointalarm > 0;
                    
                    let boxline = document.getElementById("boxline" + line.IdLine);
                    let boxlinehead = document.getElementById("boxline" + line.IdLine + "head");
                    if (boxline) {
                        let hasNG = false;
                        if (alarmline) {
                            boxline.classList.add("boxlineboderalarm");
                            boxlinehead.classList.add("boxlineheadalarm");
                            ngLineCount++;
                           
                        } else {
                            boxline.classList.remove("boxlineboderalarm");
                            boxlinehead.classList.remove("boxlineheadalarm");
                        }
                       
                    }

                });
                if (ngLineCount > 0) {
                    playAlarm();
                } else {
                    stopAlarm();
                }
                let okLineCount = totalLines - ngLineCount;
                let totalOkElement = document.getElementById('total-ok');
                if (totalOkElement) {
                    totalOkElement.innerText = `${okLineCount}/${totalLines} line OK`;
                }
            }
        });
    }
    function CalculateOkLines(lslineofFloor, LsPointnow) {
        let ngLineCount = 0;
        let totalLines = lslineofFloor.length;

        lslineofFloor.forEach(function (line) {
            let totalpointalarm = 0;
            let lspointofline = GetPointofline2(line.IdLine);

            for (let point of lspointofline) {
                LsPointnow.some(function (pointnow) {
                    if (pointnow.IdPoint == point.IdPoint && pointnow.IdLine == point.IdLine) {
                        let Statusp = GetStatus(pointnow.Alarm);

                        if (Statusp == 'NG') {
                            totalpointalarm++;
                        }
                        return true;
                    }
                });
            }

            if (totalpointalarm > 0) {
                ngLineCount++;
            }
        });

        let okLineCount = totalLines - ngLineCount;
        return { okLineCount, totalLines };
    }

    function UpdateWristStrap() {
        $.post('@Url.Action("GetAllpointNow", "ListPoints")', {}, function (input) {
            if (input != "") {
                let LsPointnow = JSON.parse(input);
                let result = CalculateOkLines(lslineofFloor, LsPointnow);

                let totalOkElementWristStrap = document.getElementById('total-ok-wriststrap');
                if (totalOkElementWristStrap) {
                    totalOkElementWristStrap.innerText = `${result.okLineCount}/${result.totalLines} line OK`;
                }
            }
        });
    }

    function UpdateLeakageVoltage() {
        $.post('@Url.Action("GetAllpointNow", "ListPoint2")', {}, function (input) {
            if (input != "") {
                let LsPointnow = JSON.parse(input);
                let result = CalculateOkLines(lslineofFloor, LsPointnow);

                let totalOkElementLeakageVoltage = document.getElementById('total-ok-leakagevoltage');
                if (totalOkElementLeakageVoltage) {
                    totalOkElementLeakageVoltage.innerText = `${result.okLineCount}/${result.totalLines} line OK `;
                }
            }
        });
    }

    function update() {
        if (Userpoint == null || lslineofFloor == null) {
            setTimeout(update, 2000);
        } else {
            Updatalsbox();
            setTimeout(update, @Model.Refresh);
        }
    }

    LoadAreaUser();
    update();
</script>

@{
    HomeController.ResetMess();
}

@section scripts {
    <script>
        $(function () {
            $('#AlertBox').removeClass('hide');
            $('#AlertBox').delay(2000).slideUp(500);
        });
    </script>
}