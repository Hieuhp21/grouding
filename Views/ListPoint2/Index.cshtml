@model IEnumerable<WEB_SHOW_WRIST_STRAP.Models.Entities.ListPoint2>

@{
    ViewData["Title"] = "POINT LIST";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="~/css/listview.css" asp-append-version="true" />
<header class="header">
    <h1>POINT LIST</h1>
</header>

<style>
    .parent {
        display: flex;
        flex-direction: row;
    }

    .parent {
        display: flex;
        flex-direction: row;
    }

    .scrollable-tbody {
        display: block;
        max-height: 70vh; /* Chiều cao cố định cho tbody */
        overflow-y: auto; /* Tạo thanh cuộn */
    }



        .scrollable-tbody tr {
            display: table;
            width: 100%;
            table-layout: fixed;
        }

        .scrollable-tbody td, .scrollable-tbody th {
            width: 11.1111111%;
        }

    table thead, table tbody tr {
        display: table;
        width: 100%;
        table-layout: fixed;
    }

    table thead {
        width: calc(100% - 1em); /* Để tránh thanh cuộn ảnh hưởng đến thead */
    }
</style>

<p class="parent">
    <a asp-action="Create" style="margin-top:15px" class="btn btn-success animation">Create New</a>
    <button style="margin-top:15px; margin-left:10px" class="btn btn-primary animation" onclick="window.location.href = '/Home/EditLayout'">Edit Layout</button>
    <a style=" padding-top:25px; margin-left:100px; margin-right:16px; height:42px"> Filter Line: </a>
    <select style="margin-top:16px;border:solid 1px gray" onchange="ChangecboxLine(this.value)" class="animation" id="cboxline">
        <option value="all">All Line</option>
    </select>
</p>


<table class="table table-striped table-bordered">
    <thead>
        <tr style="background-color:#888">

            <th>
                Point ID
            </th>
            <th>
                Line
            </th>
            <th>
                Point Name
            </th>
            <th hidden>
                @Html.DisplayNameFor(model => model.MinSpect)
            </th>
            <th hidden>
                @Html.DisplayNameFor(model => model.MaxSpect)
            </th>
            <th hidden>
                @Html.DisplayNameFor(model => model.Addsread)
            </th>
            <th hidden>
                @Html.DisplayNameFor(model => model.Addswrite)
            </th>
            <th>
               PLC
            </th>
            <th hidden>
                @Html.DisplayNameFor(model => model.OffsetValue)
            </th>
            <th hidden>
                @Html.DisplayNameFor(model => model.DeltaValue)
            </th>
            <th hidden>
                @Html.DisplayNameFor(model => model.Timeoff)
            </th>
            <th >
               ENStatus
            </th>
            <th hidden>
                @Html.DisplayNameFor(model => model.UserChange)
            </th>
            <th hidden>
                @Html.DisplayNameFor(model => model.TimeChange)
            </th>
            <th hidden>
                @Html.DisplayNameFor(model => model.Change)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Note)
            </th>
            <th>
                Y Coordinate
            </th>
            <th>
                X Coordinate
            </th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody class="scrollable-tbody">
@foreach (var item in Model) {
        <tr name="rowPoint" id="@item.IdLine">
            <td>
                @Html.DisplayFor(modelItem => item.IdPoint)
            </td>
            <td name="txtLine" onload="GetNameLine(this,@item.IdLine)">
                
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.NamePoint)
            </td>
                <td hidden>
                @Html.DisplayFor(modelItem => item.MinSpect)
            </td>
                <td hidden>
                @Html.DisplayFor(modelItem => item.MaxSpect)
            </td>
            <td hidden>
                @Html.DisplayFor(modelItem => item.Addsread)
            </td>
                <td hidden>
                @Html.DisplayFor(modelItem => item.Addswrite)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Plc)
            </td>
                <td hidden>
                @Html.DisplayFor(modelItem => item.OffsetValue)
            </td>
                <td hidden>
                @Html.DisplayFor(modelItem => item.DeltaValue)
            </td>
                <td hidden>
                @Html.DisplayFor(modelItem => item.Timeoff)
            </td>
                @if (item.Enstatus == 0)
                {
                    <td>Not Set</td>
                }
                else if (item.Enstatus == 3)
                {
                    <td>On Light, On Buzzer</td>
                }
                else if (item.Enstatus == 2)
                {
                    <td>On Light, Off Buzzer</td>
                }
                else if (item.Enstatus == 1)
                {
                    <td>Off Light, Off Buzzer</td>
                }
                <td hidden>
                @Html.DisplayFor(modelItem => item.UserChange)
            </td>
                <td hidden>
                @Html.DisplayFor(modelItem => item.TimeChange)
            </td>
                <td hidden>
                @Html.DisplayFor(modelItem => item.Change)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Note)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Csstop)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Cssleft)
            </td>
            <td>
                    <a asp-action="Edit" asp-route-id="@item.IdPoint.ToString()|@item.IdLine.ToString()" class="btn btn-primary animationbase" style="height:auto;font-size:12px">EDIT</a>
                    <a asp-action="Delete" asp-route-id="@item.IdPoint.ToString()|@item.IdLine.ToString()" class="btn btn-danger animationbase" style="height:auto;font-size:12px">DELETE</a>
            </td>
        </tr>
}
    </tbody>
</table>

<script>
    let cboxline = document.getElementById("cboxline");
    let lsrowpoint = document.getElementsByName("rowPoint");

    function ChangecboxLine(idline) {
        if (idline == "all") {
            lsrowpoint.forEach(function (row) {
                row.style.display = "";
            });
        }
        else {
            lsrowpoint.forEach(function (row) {
                if (row.id == idline)
                    row.style.display = "";
                else
                    row.style.display = "none";
            });
        }
    }

    function GetNameLine(txt, idline) {
        let line = GetLine(idline);
        txt.innerHTML = line ? line.NameLine : 'Deleted LineID:' + idline;
    }

    async function LoadFloor() {
        if (Userline == null) { setTimeout(LoadFloor, 50); }
        else {
            document.getElementsByName("txtLine").forEach(function (txt) {
                txt.onload();
            });
        }
    };

    async function LoadCboxLine() {
        if (Userline == null) { setTimeout(LoadCboxLine, 50); }
        else {
            Userline.forEach(function (line) {
                cboxline.innerHTML += '<option value=' + line.IdLine + '>' + line.NameLine + '</option>';
            });
        }
    }

    LoadFloor();
    LoadCboxLine();
</script>
